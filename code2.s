.global _start
_start:
    SUB R0, R15, R15	//R0 = 0                            1110 00 000100 1111 0000 00000000 1111    E04F000F
    //---------------------------------------------------------------
    //--------------------ADD y MUL en FP 32 bits--------------------
    //---------------------------------------------------------------
        //Buscamos R3 = 4 283.25 = 0x4585DA00 = 1 166 400 000
    ADD R1, R0, #180	//R1 = 180                          1110 00 101000 0000 0001 00001011 0100    E28010B4
    ADD R2, R0, #200	//R2 = 200                          1110 00 101000 0000 0010 00001100 1000    E28020C8
    MUL R3, R1, R1		//R3 = 32 400                       1110 00 000000 0001 0011 00001001 0001    E0013091
    MUL R3, R3, R1		//R3 = 5 832 000                    1110 00 000000 0011 0011 00001001 0001    E0033091
    MUL R3, R3, R2		//R3 = 1 166 400 000                1110 00 000000 0011 0011 00001001 0010    E0033092
        //Buscamos R4 = 1.5 = 0x3fc00000 = 1 069 547 520
    ADD R1, R0, #128	//R1 = 128                          1110 00 101000 0000 0001 00001000 0000    E2801080
    MUL R2, R1, R1		//R2 = 16 384                       1110 00 000000 0001 0010 00001001 0001    E0012091
    ADD R2, R2, R2		//R2 = 32 768                       1110 00 001000 0010 0010 00000000 0010    E0822002
    SUB R1, R2, R1		//R1 = 32 640                       1110 00 000100 0010 0001 00000000 0001    E0421001
    MUL R4, R1, R2      //R4 = 1 069 547 520                1110 00 000000 0001 0100 00001001 0010    E0014092
    
    VADD R5, R3, R4     //R5 = R3 + R4 (FP) = 4 284.75      1110 11 000010 0011 0101 00000000 0100    EC235004
    STR R5, [R0, #200]  //mem[200] = 4 284.75 = 0x4585e600  1110 01 011000 0000 0101 00001100 1000    E58050C8
    VMUL R5, R3, R4     //R5 = R3 * R4 (FP) = 6 424.875     1110 11 000110 0011 0101 00000000 0100    EC635004
    STR R5, [R0, #204]  //mem[204] = 6 424.875 = 0x45c8c700 1110 01 011000 0000 0101 00001100 1100    E58050CC

    //---------------------------------------------------------------
    //-------------------------UMULL y SMULL-------------------------
    //---------------------------------------------------------------
        //Tenemos  R4 = 0x3fc00000 = 1 069 547 520
        //Buscamos R4 = 0xD15A5500 = 3 208 642 560 = 3*R4
    ADD R6, R4, R4      //R6 = 2*R4                         1110 00 001000 0100 0110 00000000 0100    E0846004
    ADD R4, R4, R6      //R4 = 3*R4 = 0xBF400000            1110 00 001000 0100 0100 00000000 0110    E0844006
        //Tenemos  R5 = 0x45c8c700 = 1 170 786 048
        //Buscamos R5 = 0xD15A5500 = 3 512 358 144 = 3*R5
    ADD R6, R5, R5      //R6 = 2*R5                         1110 00 001000 0101 0110 00000000 0101    E0856005
    ADD R5, R5, R6      //R5 = 3*R5 = 0xD15A5500            1110 00 001000 0101 0101 00000000 0110    E0855006
        //Unsigned R4*R5 = 11 269 901 826 801 008 640  = 0x9C66BC00 40000000 = {R1 R2}
        //R4*R5 = R1,R2
    UMULL R1, R4, R5, R2//{R1, R2} = R4 x R5                1110 00 001000 0100 0001 00101001 0101    E0841295
    STR R1, [R0, #208]  //mem[208] = R1 = 0x9C66BC00        1110 01 011000 0000 0001 00001101 0000    E58010D0
    STR R2, [R0, #212]  //mem[212] = R2 = 0x40000000        1110 01 011000 0000 0010 00001101 0100    E58020D4
    
        //R4 = BF40 0000 = -1086324736 (en Two’s Complement, signed)
        //R5 = D15A 5500 = -782609152  (en Two’s Complement, signed)
        //Signed R4*R5 = 850 167 680 437 583 872 = 0x0BCC6700 40000000 = {R1, R2}
    SMULL R1, R4, R5, R2//{R1, R2} = R4 x R5                1110 00 001100 0100 0001 00101001 0101    E0C41295
    STR R1, [R0, #216]  //mem[216] = R1 = 0x0BCC6700        1110 01 011000 0000 0001 00001101 1000    E58010D8
    STR R2, [R0, #220]  //mem[220] = R2 = 0x40000000        1110 01 011000 0000 0010 00001101 1100    E58020DC
    
    //---------------------------------------------------------------
    //--------------------ADD y MUL en FP 16 bits--------------------
    //---------------------------------------------------------------
        //Buscamos R3 = 1.625 = 0x00003E80 = 16 000 = 100 * 160
    ADD R1, R0, #100    //R1 = 100                          1110 00 101000 0000 0001 00000110 0100    E2801064
    ADD R2, R0, #160    //R2 = 160                          1110 00 101000 0000 0010 00001010 0000    E28020A0
    MUL R3, R1, R2      //R3 = R1 * R2                      1110 00 000000 0001 0011 00001001 0010    E0013092
        //Buscamos R4 = 0.5 = 0x00003800 = 14 336 = 128 * 112
    ADD R1, R0, #128    //R1 = 128                          1110 00 101000 0000 0001 00001000 0000    E2801080
    ADD R2, R0, #112    //R2 = 112                          1110 00 101000 0000 0010 00000111 0000    E2802070
    MUL R4, R1, R2      //R4 = R1 * R2                      1110 00 000000 0001 0100 00001001 0010    E0014092
    
    VADDH R5, R3, R4    //R5 = R3 + R4 (HFP) = 2.125        1110 11 000000 0011 0101 00000000 0100    EC035004
    STR R5, [R0, #224]  //mem[224] = 2.125 = 0x00004040     1110 01 011000 0000 0101 00001110 0000    E58050E0
    VMULH R5, R3, R4    //R5 = R3 * R4 (HFP) = 0.8125       1110 11 000100 0011 0101 00000000 0100    EC435004
    STR R5, [R0, #228]  //mem[228] = 0.8125 = 0x00003A80    1110 01 011000 0000 0101 00001110 0100    E58050E4
    
    //---------------------------------------------------------------
    //--------------------------Flags en FP--------------------------
    //---------------------------------------------------------------
        //Buscamos R4 = 1.5 = 0x3FC00000 = 1 069 547 520
    ADD R1, R0, #128	//R1 = 2^7 = 128                    1110 00 101000 0000 0001 00001000 0000    E2801080
    MUL R2, R1, R1		//R2 = 2^14 = 16 384                1110 00 000000 0001 0010 00001001 0001    E0012091
    ADD R2, R2, R2		//R2 = 2^15 = 32 768                1110 00 001000 0010 0010 00000000 0010    E0822002
    SUB R1, R2, R1		//R1 = 32 768 - 128 = 32640         1110 00 000100 0010 0001 00000000 0001    E0421001
    MUL R4, R1, R2      //R4 = 1 069 547 520                1110 00 000000 0001 0100 00001001 0010    E0014092
    
        //Buscamos R5 = -1.5 = 0xBFC00000 = 3 217 031 168 = 8 * 16^7 + R4
    ADD R1, R0, #16	    //R1 = 16                           1110 00 101000 0000 0001 00000001 0000    E2801010
    MUL R2, R1, R1		//R2 = 16^2                         1110 00 000000 0001 0010 00001001 0001    E0012091
    MUL R3, R2, R2		//R3 = 16^4                         1110 00 000000 0010 0011 00001001 0010    E0023092
    MUL R5, R1, R2		//R5 = 16^3                         1110 00 000000 0001 0101 00001001 0010    E0015092
    MUL R5, R5, R3      //R5 = 16^7                         1110 00 000000 0101 0101 00001001 0011    E0055093
    ADD R1, R0, #8	    //R1 = 8                            1110 00 101000 0000 0001 00000000 1000    E2801008
    MUL R5, R5, R1	    //R5 = 8*16^7                       1110 00 000000 0101 0101 00001001 0001    E0055091
    ADD R5, R4, R5      //R5 = R5 + R4 = -1.5               1110 00 001000 0100 0101 00000000 0101    E0845005
    
    VADDS R6, R4, R5    //R6 = 1.5 + (-1.5) = 0             1110 11 000011 0100 0110 00000000 0101    EC346005
    STREQ R6, [R0, #232]//mem[232] = 0                      0000 01 011000 0000 0110 00001110 1000    058060E8
    STRNE R1, [R0, #232]//mem[232] = 8                      0001 01 011000 0000 0001 00001110 1000    158010E8
